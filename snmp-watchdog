#! /usr/bin/perl
# Author: Angus Warren
# Date: March 2021
# Description: Runs as an extension to snmpd to read EdgeOS load balance status
#
# snmpd.conf should have a line like this: 
#pass .1.3.6.1.4.1.56751.1.1 /config/scripts/snmp-watchdog
#sudo invoke-rc.d snmpd restart
#
## Example output
##  snmpwalk -v 2c -On -c $SECRET $HOSTNAME .1.3.6.1.4.1.56751.1.1
# .1.3.6.1.4.1.56751.1.1.0.0 = STRING: "LB_wan1primary"
# .1.3.6.1.4.1.56751.1.1.0.1 = STRING: "LB_wan1primary"
# .1.3.6.1.4.1.56751.1.1.0.2 = STRING: "LB_wan2primary"
# .1.3.6.1.4.1.56751.1.1.0.3 = STRING: "LB_wan2primary"
# .1.3.6.1.4.1.56751.1.1.1.0 = STRING: "pppoe0"
# .1.3.6.1.4.1.56751.1.1.1.1 = STRING: "pppoe1"
# .1.3.6.1.4.1.56751.1.1.1.2 = STRING: "pppoe0"
# .1.3.6.1.4.1.56751.1.1.1.3 = STRING: "pppoe1"
# .1.3.6.1.4.1.56751.1.1.2.0 = STRING: "OK"
# .1.3.6.1.4.1.56751.1.1.2.1 = STRING: "OK"
# .1.3.6.1.4.1.56751.1.1.2.2 = STRING: "OK"
# .1.3.6.1.4.1.56751.1.1.2.3 = STRING: "OK"

use strict;
use warnings;
#use Data::Dump 'dd';

my $BASE = '.1.3.6.1.4.1.56751.1.1';
my $FORCECACHE = 0;
 
sub load_watchdog_status {
    # This will load the watchdog status and cache it to file.
    # If there's a cached version from the last 30 seconds, it 
    # will use that rather than re-running the status command.

    my $UID = "$<";
    my $TMPFILE = "/tmp/watchdog-status-$UID";
    my $maxage = 1/24/60/60*30; # 30 seconds

    if ($FORCECACHE == 0 && (! -f $TMPFILE || -M $TMPFILE > $maxage)) {
        # refresh the cached watchdog status output
        my $cmd = "/config/scripts/show-watchdog-status > $TMPFILE";
        system($cmd);
    }
    my $output;
    open(my $fh, '<', $TMPFILE)
        or die "Unable to open $TMPFILE: $!";
    {
        local $/;
        $output = <$fh>;
    }
    close($fh);
    return $output;
}

sub parse_status {
    # Parses the watchdog status output into an Array of Arrays.
    # Returns something like this:
    # (
    #   ["LB_wan1primary", "pppoe0", "OK"],
    #   ["LB_wan1primary", "pppoe1", "OK"],
    #   ["LB_wan2primary", "pppoe0", "OK"],
    #   ["LB_wan2primary", "pppoe1", "OK"]
    # )

    my $block = shift;
    my @groups;
    while( $block =~ /^Group ([^\n]*)\n((?:.|\n)*?)(?=Group |\z)/gm ) {
        my $group = $1;
        my $ifaceblock = $2;
        while ( $ifaceblock =~ /^  (.+)\n  status: ([^\n]*)/gm ) {
            my $iface = $1;
            my $status = $2;
            push(@groups, [$group, $iface, $status]);
        }
    }
    return @groups;
}

sub print_snmp_string {
    my $oid = shift;
    my $string = shift;
    print "$oid\nstring\n$string\n";
}


sub get_oid_parts {
    # Strips the base off an OID and returns the remaining parts as an array.
    # Returns an empty array if the OID doesn't match the base.
    my($oid) = @_;
    my @splits;
    if (index($oid,$BASE) == 0) {
        $oid =~ s/^$BASE\.?//;
        @splits = split(/\./, $oid);
    }
    return @splits;
}

sub get_oid {
    my($oid, @groups) = @_;
    my @split = get_oid_parts($oid);

    my $output;
    if ($oid eq $BASE) {
        $output = "Watchdog Status";
    } elsif (@split == 2) {
        my $max_table = @{$groups[0]}-1;
        my $max_index = @groups-1;
        my $table = $split[0]; # data type (group name, interface, status)
        my $index = $split[1]; # interface
        if ($index <= $max_index && $table <= $max_table) {
            $output = @{$groups[$index]}[$table];
        }
    }
    if (defined $output) {
        print_snmp_string($oid,$output);
    }
}

sub get_next {
    my($oid, @groups) = @_;

    my @split = get_oid_parts($oid);
    my $next_table;
    my $next_index;
    if (@split == 0) {
        $next_table = 0;
        $next_index = 0;
    } else {
        my $max_table = @{$groups[0]}-1;
        my $max_index = @groups-1;
        my $table = $split[0]; # data type (group name, interface, status)
        my $index = $split[1]; # interface
        if (not defined $index) {
            $next_table = $table;
            $next_index = 0;
        } elsif ($index < $max_index) {
            $next_table = $table;
            $next_index = $index + 1;
        } else {
            $next_table = $table + 1;
            $next_index = 0;
        }
    }
    my $nextoid = "$BASE.$next_table.$next_index";
    get_oid($nextoid, @groups);
}

sub usage {
    warn "Usage: $0 [--force-cache] {-g|-n} $BASE\[suffix]\n";
    exit 1;
}

if (@ARGV < 2) {
    usage();
    exit 1;
}

my $act = shift;
if ($act eq '--force-cache') {
    $FORCECACHE = 1;
    $act = shift;
}
my $oid = shift;

my $data = load_watchdog_status();
my @groups = parse_status($data);

if ($act eq '-g') {
    get_oid($oid, @groups);
} elsif ($act eq '-n') {
    get_next($oid, @groups);
} else {
    usage();
}
